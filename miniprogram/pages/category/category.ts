import { dataManager } from '../../utils/dataManager'

interface Tool {
  id: string
  name: string
  icon: string
  description: string
  path: string
}

interface Category {
  id: string
  name: string
  icon: string
  description: string
  tools: Tool[]
  toolCount: number
}

Page({
  data: {
    searchText: '',
    categories: [] as Category[],
    filteredCategories: [] as Category[],
    totalCategories: 0,
    totalTools: 0
  },

  onLoad() {
    console.log('[Category] È°µÈù¢Âä†ËΩΩ')
    this.loadCategories()
  },

  onShow() {
    console.log('[Category] È°µÈù¢ÊòæÁ§∫')
    this.updateStats()
  },

  onPullDownRefresh() {
    console.log('[Category] ‰∏ãÊãâÂà∑Êñ∞')
    this.loadCategories()
    setTimeout(() => {
      wx.stopPullDownRefresh()
    }, 1000)
  },

  /**
   * Âä†ËΩΩÂàÜÁ±ªÊï∞ÊçÆ
   */
  loadCategories() {
    try {
      // Ê®°ÊãüÂàÜÁ±ªÊï∞ÊçÆ
      const categories: Category[] = [
        {
          id: 'calculation',
          name: 'ËÆ°ÁÆóÂ∑•ÂÖ∑',
          icon: 'üßÆ',
          description: 'ÂêÑÁßçËÆ°ÁÆóÂíåÊï∞Â≠¶Â∑•ÂÖ∑',
          tools: [
            {
              id: 'calculator',
              name: 'ËÆ°ÁÆóÂô®',
              icon: 'üî¢',
              description: 'Âü∫Á°ÄÊï∞Â≠¶ËÆ°ÁÆó',
              path: '/pages/tools/calculator/calculator'
            }
          ],
          toolCount: 1
        },
        {
          id: 'conversion',
          name: 'ËΩ¨Êç¢Â∑•ÂÖ∑',
          icon: 'üîÑ',
          description: 'Âçï‰ΩçËΩ¨Êç¢ÂíåÊ†ºÂºèËΩ¨Êç¢',
          tools: [
            {
              id: 'converter',
              name: 'Âçï‰ΩçËΩ¨Êç¢',
              icon: 'üìè',
              description: 'ÈïøÂ∫¶„ÄÅÈáçÈáè„ÄÅÊ∏©Â∫¶Á≠âÂçï‰ΩçËΩ¨Êç¢',
              path: '/pages/tools/converter/converter'
            },
            {
              id: 'imageconverter',
              name: 'ÂõæÁâáËΩ¨Êç¢',
              icon: 'üñºÔ∏è',
              description: 'ÂõæÁâáÊ†ºÂºèËΩ¨Êç¢Â∑•ÂÖ∑',
              path: '/pages/tools/imageconverter/imageconverter'
            }
          ],
          toolCount: 2
        },
        {
          id: 'entertainment',
          name: 'Â®±‰πêÂ∑•ÂÖ∑',
          icon: 'üéÆ',
          description: '‰ºëÈó≤Â®±‰πêÂíåÁîüÊ¥ªË∂£Âë≥Â∑•ÂÖ∑',
          tools: [
            {
              id: 'foodwheel',
              name: '‰ªäÂ§©ÂêÉ‰ªÄ‰πà',
              icon: 'üçΩÔ∏è',
              description: 'ÈöèÊú∫ÈÄâÊã©ÁæéÈ£üÁöÑËΩ¨ÁõòÂ∑•ÂÖ∑',
              path: '/pages/tools/foodwheel/foodwheel'
            }
          ],
          toolCount: 1
        },
        {
          id: 'text',
          name: 'ÊñáÊú¨Â∑•ÂÖ∑',
          icon: 'üìù',
          description: 'ÊñáÊú¨Â§ÑÁêÜÂíåÁºñËæëÂ∑•ÂÖ∑',
          tools: [],
          toolCount: 0
        },
        {
          id: 'qrcode',
          name: '‰∫åÁª¥Á†ÅÂ∑•ÂÖ∑',
          icon: 'üì±',
          description: '‰∫åÁª¥Á†ÅÁîüÊàêÂíåËØÜÂà´',
          tools: [
            {
              id: 'qrcode',
              name: '‰∫åÁª¥Á†ÅÁîüÊàê',
              icon: 'üì±',
              description: 'ÁîüÊàêÂêÑÁßç‰∫åÁª¥Á†Å',
              path: '/pages/tools/qrcode/qrcode'
            }
          ],
          toolCount: 1
        },
        {
          id: 'network',
          name: 'ÁΩëÁªúÂ∑•ÂÖ∑',
          icon: 'üåê',
          description: 'ÁΩëÁªúÊµãËØïÂíåÂàÜÊûêÂ∑•ÂÖ∑',
          tools: [],
          toolCount: 0
        }
      ]

      this.setData({
        categories,
        filteredCategories: categories
      })

      this.updateStats()
      console.log('[Category] ÂàÜÁ±ªÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê:', categories.length)

    } catch (error) {
      console.error('[Category] Âä†ËΩΩÂàÜÁ±ªÊï∞ÊçÆÂ§±Ë¥•:', error)
      wx.showToast({
        title: 'Âä†ËΩΩÂ§±Ë¥•',
        icon: 'error'
      })
    }
  },

  /**
   * Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
   */
  updateStats() {
    const { categories } = this.data
    const totalCategories = categories.length
    const totalTools = categories.reduce((sum, category) => sum + category.toolCount, 0)

    this.setData({
      totalCategories,
      totalTools
    })
  },

  /**
   * ÊêúÁ¥¢ËæìÂÖ•Â§ÑÁêÜ
   */
  onSearchInput(e: any) {
    const searchText = e.detail.value
    this.setData({ searchText })
    this.filterCategories(searchText)
  },

  /**
   * ÊêúÁ¥¢Á°ÆËÆ§Â§ÑÁêÜ
   */
  onSearchConfirm(e: any) {
    const searchText = e.detail.value
    this.filterCategories(searchText)
  },

  /**
   * Ê∏ÖÈô§ÊêúÁ¥¢
   */
  onClearSearch() {
    this.setData({ searchText: '' })
    this.filterCategories('')
    
    // Êèê‰æõËß¶ËßâÂèçÈ¶à
    wx.vibrateShort({
      type: 'light'
    })
  },

  /**
   * ËøáÊª§ÂàÜÁ±ª
   */
  filterCategories(searchText: string) {
    const { categories } = this.data
    
    if (!searchText.trim()) {
      this.setData({ filteredCategories: categories })
      return
    }

    const filtered = categories.filter(category => {
      // ÊêúÁ¥¢ÂàÜÁ±ªÂêçÁß∞ÂíåÊèèËø∞
      const nameMatch = category.name.toLowerCase().includes(searchText.toLowerCase())
      const descMatch = category.description.toLowerCase().includes(searchText.toLowerCase())
      
      // ÊêúÁ¥¢Â∑•ÂÖ∑ÂêçÁß∞
      const toolMatch = category.tools.some(tool => 
        tool.name.toLowerCase().includes(searchText.toLowerCase()) ||
        tool.description.toLowerCase().includes(searchText.toLowerCase())
      )

      return nameMatch || descMatch || toolMatch
    })

    this.setData({ filteredCategories: filtered })
    console.log('[Category] ËøáÊª§ÁªìÊûú:', filtered.length)
  },

  /**
   * ÂàÜÁ±ªÁÇπÂáªÂ§ÑÁêÜ
   */
  onCategoryTap(e: any) {
    const category = e.currentTarget.dataset.category as Category
    
    if (!category) {
      console.error('[Category] ÂàÜÁ±ªÊï∞ÊçÆ‰∏∫Á©∫')
      return
    }

    console.log('[Category] ÁÇπÂáªÂàÜÁ±ª:', category.name)

    // Â¶ÇÊûúÊ≤°ÊúâÂ∑•ÂÖ∑ÔºåÊòæÁ§∫ÊèêÁ§∫
    if (category.toolCount === 0) {
      wx.showToast({
        title: 'ËØ•ÂàÜÁ±ªÊöÇÊó†Â∑•ÂÖ∑',
        icon: 'none',
        duration: 2000
      })
      return
    }

    // Ëß¶ËßâÂèçÈ¶à
    wx.vibrateShort({
      type: 'light'
    })

    // Â¶ÇÊûúÂè™Êúâ‰∏Ä‰∏™Â∑•ÂÖ∑ÔºåÁõ¥Êé•Ë∑≥ËΩ¨
    if (category.tools.length === 1) {
      this.navigateToTool(category.tools[0])
      return
    }

    // Â§ö‰∏™Â∑•ÂÖ∑Êó∂ÔºåÂèØ‰ª•ÊòæÁ§∫Â∑•ÂÖ∑ÂàóË°®ÊàñÂÖ∂‰ªñÂ§ÑÁêÜ
    wx.showActionSheet({
      itemList: category.tools.map(tool => tool.name),
      success: (res) => {
        const selectedTool = category.tools[res.tapIndex]
        this.navigateToTool(selectedTool)
      }
    })
  },

  /**
   * Â∑•ÂÖ∑ÁÇπÂáªÂ§ÑÁêÜ
   */
  onToolTap(e: any) {
    e.stopPropagation() // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
    const tool = e.currentTarget.dataset.tool as Tool
    this.navigateToTool(tool)
  },

  /**
   * ÂØºËà™Âà∞Â∑•ÂÖ∑È°µÈù¢
   */
  navigateToTool(tool: Tool) {
    if (!tool || !tool.path) {
      console.error('[Category] Â∑•ÂÖ∑Ë∑ØÂæÑÊó†Êïà:', tool)
      wx.showToast({
        title: 'Â∑•ÂÖ∑ÊöÇ‰∏çÂèØÁî®',
        icon: 'error'
      })
      return
    }

    console.log('[Category] ÂØºËà™Âà∞Â∑•ÂÖ∑:', tool.name, tool.path)

    // Ëß¶ËßâÂèçÈ¶à
    wx.vibrateShort({
      type: 'light'
    })

    // ËÆ∞ÂΩï‰ΩøÁî®ÂéÜÂè≤
    try {
      dataManager.addUsageRecord({
        toolId: tool.id,
        toolName: tool.name,
        category: 'tools'
      })
    } catch (error) {
      console.warn('[Category] ËÆ∞ÂΩïÂéÜÂè≤Â§±Ë¥•:', error)
    }

    // È°µÈù¢Ë∑≥ËΩ¨
    wx.navigateTo({
      url: tool.path,
      fail: (error) => {
        console.error('[Category] È°µÈù¢Ë∑≥ËΩ¨Â§±Ë¥•:', error)
        wx.showToast({
          title: 'È°µÈù¢Ë∑≥ËΩ¨Â§±Ë¥•',
          icon: 'error'
        })
      }
    })
  }
}) 